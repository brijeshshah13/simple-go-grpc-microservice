// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AlgebraClient is the client API for Algebra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlgebraClient interface {
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Multiply(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Divide(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type algebraClient struct {
	cc grpc.ClientConnInterface
}

func NewAlgebraClient(cc grpc.ClientConnInterface) AlgebraClient {
	return &algebraClient{cc}
}

var algebraAddStreamDesc = &grpc.StreamDesc{
	StreamName: "Add",
}

func (c *algebraClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.Algebra/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var algebraMultiplyStreamDesc = &grpc.StreamDesc{
	StreamName: "Multiply",
}

func (c *algebraClient) Multiply(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.Algebra/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var algebraDivideStreamDesc = &grpc.StreamDesc{
	StreamName: "Divide",
}

func (c *algebraClient) Divide(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.Algebra/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlgebraService is the service API for Algebra service.
// Fields should be assigned to their respective handler implementations only before
// RegisterAlgebraService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type AlgebraService struct {
	Add      func(context.Context, *Request) (*Response, error)
	Multiply func(context.Context, *Request) (*Response, error)
	Divide   func(context.Context, *Request) (*Response, error)
}

func (s *AlgebraService) add(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protos.Algebra/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Add(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AlgebraService) multiply(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protos.Algebra/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Multiply(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AlgebraService) divide(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protos.Algebra/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Divide(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterAlgebraService registers a service implementation with a gRPC server.
func RegisterAlgebraService(s grpc.ServiceRegistrar, srv *AlgebraService) {
	srvCopy := *srv
	if srvCopy.Add == nil {
		srvCopy.Add = func(context.Context, *Request) (*Response, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
		}
	}
	if srvCopy.Multiply == nil {
		srvCopy.Multiply = func(context.Context, *Request) (*Response, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
		}
	}
	if srvCopy.Divide == nil {
		srvCopy.Divide = func(context.Context, *Request) (*Response, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "protos.Algebra",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Add",
				Handler:    srvCopy.add,
			},
			{
				MethodName: "Multiply",
				Handler:    srvCopy.multiply,
			},
			{
				MethodName: "Divide",
				Handler:    srvCopy.divide,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "protos/algebra.proto",
	}

	s.RegisterService(&sd, nil)
}
